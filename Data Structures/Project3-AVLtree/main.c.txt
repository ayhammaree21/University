#include <stdio.h>

#include <stdlib.h>

#include <string.h>


///////////////////////////////////////
struct AVLNODE {
    char Name[20];
    char Gender;
    int DateInHos;
    int DateOfBirth;
    char Illness[20];
    char Address[20];
    char BloodType [3];
    struct AVLNODE *left;
    struct AVLNODE  *right;
    int Height;


};
struct AVLNODE * tree = NULL;
void print(struct AVLNODE *print);
struct AVLNODE* insert (struct AVLNODE* t,char pname[20],char pgender,int pDate1,int pDate2,char pillness[20],char paddress[20],char pblood[3]);
struct AVLNODE *simplify(char data[]);
struct AVLNODE *SearchName(char pname[20],struct AVLNODE *temp);
struct AVLNODE *Update(struct AVLNODE *root,char name[20]);
void printSameIllness(struct AVLNODE *node , char illnesss[20]);
int getHeight (struct AVLNODE *t);
int MAX (int x, int y);
struct AVLNODE * minNode(struct AVLNODE* n);
int getBalance(struct AVLNODE *N);
struct AVLNODE* newNode(char pname[20],char pgender,int pDate1,int pDate2,char pillness[20],char paddress[20],char pbloodtype[3]);
struct AVLNODE *singleRotateLeft(struct AVLNODE *k2);
struct AVLNODE *doubleRotateLeft(struct AVLNODE *K3);
struct AVLNODE *singleRotateRight(struct AVLNODE *k1);
struct AVLNODE *doubleRotateRight(struct AVLNODE *K3);
void insertNewPatient();
struct AVLNODE *DeletefromSystem(struct AVLNODE *root,char name[20]);
void print(struct AVLNODE *print);
void printlexicoInOrder(struct AVLNODE *az);
int main (){

     printf("\n\n\t\t Hospital System - Welcome to hospital system:\n\n\n");
    int choice = 0 ;
    char input1[20];
    struct AVLNODE *TREE = NULL;
    while(choice!=7)
    {
        printf("Press 1: Read from file and insert Patients to tree\n");
        printf("Press 2: Insert A New Patient By User \n");
        printf("Press 3: Search For A Patient And Give User To Update The Information Of The Patient Found \n");
        printf("Press 4: List All Patients In Lexicographic Order\n");
        printf("Press 5: List All Patients Have The Same Illness\n");
        printf("Press 6: Delete A Patient From The System\n");
        printf("Press 7: Save Data to File\n");
        printf ("Enter Your Choice Please :");
        scanf("%d",&choice);
        switch(choice){
            case 1:
     printf("The Patients List In Hospital:\n");
      FILE *fp;
     char line[1000];
     char copiedline[1000];
     int count=0;

     struct AVLNODE *patient;
     fp = fopen("patients.txt","r");
     while(!feof(fp)){
        fgets(line,sizeof(line),fp);
        if(strcmp(line,copiedline)){
            patient=simplify(line);
            count++;
            strcpy(copiedline,line);
        }
        fclose(fp);
        printf("The Data Loaded Successfully !\n");
     break;
            case 2:
                insertNewPatient();
                break;
            case 3:
            printf("Enter The Name Of Patient You Want To Search:\n");
            scanf("%c",&input1[0]);
        gets(input1);
        SearchName(input1,tree);
        if((TREE!=NULL)){
            print(TREE);
            char answer;
            printf("If you want to update the informations of patient enter y :");
            scanf("%s",&answer);
            if (answer == 'y' )
            {
                Update(tree,input1);
            }
            break;
            case 4:
            printlexicoInOrder(tree);
            break;

 }
 }
 }
}
}




///////////////////////////////////////
int getHeight (struct AVLNODE *t){
    if(t==NULL)
        return 0;
    else
        return t->Height;
}
////////////////////////////////////////
int MAX (int x, int y){
    if(x>y)
        return x;
    else
        return y;
}
struct AVLNODE * minNode(struct AVLNODE* n)
{
    struct AVLNODE* current=n;
    while(current->left!=NULL)
        current=current->left;

    return current;
}
/////////////////////////////////////////
int getBalance(struct AVLNODE *N)
{
    if (N == NULL)
        return 0;
    return getHeight(N->left) - getHeight(N->right);
}
//////////////////////////////////////////
struct AVLNODE* newNode(char pname[20],char pgender,int pDate1,int pDate2,char pillness[20],char paddress[20],char pbloodtype[3])
{
struct AVLNODE* node = (struct AVLNODE*)malloc(sizeof(struct AVLNODE));
strcpy(node->Name,pname);
node->Gender = pgender;
node->DateInHos= pDate1;
node->DateOfBirth = pDate2;
strcpy(node->Illness,pillness);
strcpy(node->Address,paddress);
strcpy(node->BloodType,pbloodtype);
node->left = NULL;
node->right = NULL;
node->Height = 0;
return(node);
}
//////////////////////////////////////
struct AVLNODE *singleRotateLeft(struct AVLNODE *k2) {
 struct AVLNODE *k1;
 k1 = k2->left;
 k2->left=k1->right;
 k1->right=k2;

    k2->Height = 1 + MAX(getHeight(k2->left) , getHeight(k2->right));
    k1->Height = 1 + MAX(getHeight(k1->left) , getHeight(k1->right));

    return k1;
}
////////////////////////////////////////////
struct AVLNODE *singleRotateRight(struct AVLNODE *k1)
{
    struct AVLNODE *k2;
    k2 = k1->right;
    k1->right=k2->left;
    k2->left=k1;

    k1->Height = MAX(getHeight(k1->left), getHeight(k1->right))+1;
    k2->Height = MAX(getHeight(k2->left), getHeight(k2->right))+1;
    return k2;
}
////////////////////////////////////////
struct AVLNODE *doubleRotateLeft(struct AVLNODE *K3) {
    K3->left  = singleRotateRight(K3->left);
    return singleRotateLeft(K3);
}
////////////////////////////////////////////////
struct AVLNODE *doubleRotateRight(struct AVLNODE *K3) {
    K3->right  = singleRotateLeft(K3->right);
    return singleRotateRight(K3);
}
//////////////////////////////
//////////////////////////////////////////
struct AVLNODE* insert (struct AVLNODE* t,char pname[20],char pgender,int pDate1,int pDate2,char pillness[20],char paddress[20],char pblood[3]){
    if(t == NULL)
      return newNode(pname,pgender,pDate1,pDate2,pillness,paddress,pblood);
    else{
    if(strcasecmp(pname,t->Name) == -1){
        t->left = insert(t->left,pname,pgender,pDate1,pDate2,pillness,paddress,pblood);
        if(getHeight(t->left) - getHeight( t->right ) == 2){
            if(strcasecmp(pname,t->left->Name) == -1)
                t = singleRotateLeft( t );
            else
                t = doubleRotateLeft( t );
    }
    }
    else if(strcasecmp(pname,t->Name) == 1){
        t->right = insert( t->right,pname,pgender,pDate1,pDate2,pillness,paddress,pblood);
        if( getHeight( t->right ) - getHeight( t->left ) == 2 ){
            if(strcasecmp(pname,t->right->Name) == 1)
                t = singleRotateRight( t );
            else
                t = doubleRotateRight( t );
    }
    }
    }
    t->Height = MAX( getHeight( t->left ), getHeight( t->right ) ) + 1;
    return t;
}




/////////////////////////////////////////////////////////////
struct AVLNODE *simplify(char data[]){
    struct AVLNODE *pat = (struct AVLNODE*)malloc(sizeof(struct AVLNODE));
    pat->left=NULL;
    pat->right=NULL;
    pat->Height = 0;
    char *p = "#";
    char *empty = "";
    strcpy(pat->Name, strtok(data,p));
    printf("Patient Name: %s\n",pat->Name);
    int variable = strlen(pat->Name)+1;
    char c = data[variable];
    pat->Gender = c;
    strtok(NULL,"#");
    printf("Patient Gender: %c\n",pat->Gender);
    pat->DateInHos=atoi(strtok(NULL,p));
    printf("Date Of Admission Of Patient In Hospital: %d\n",pat->DateInHos);
    pat->DateOfBirth=atoi(strtok(NULL,p));
    printf("Date Of Birth Of Patient: %d\n",pat->DateOfBirth);
    strcpy(pat->Illness, strtok(NULL , p));
    printf("The illness that the patient suffers from : %s\n",pat->Illness);
    strcpy(pat->Address, strtok(NULL , p));
    printf("The address where the patient lives : %s\n",pat->Address);
    strcpy(pat->BloodType, strtok(NULL , empty));
    printf("The patient's blood type: %s\n",pat->BloodType);
    insert(pat,pat->Name,pat->Gender,pat->DateInHos,pat->DateOfBirth,pat->Illness,pat->Address,pat->BloodType);
    return pat;
}
  void insertNewPatient(){
     struct AVLNODE *root = (struct AVLNODE*)malloc(sizeof(struct AVLNODE));
    char newName[20];
    char newGender;
    int newDate1;
    int newDate2;
    char newIllness[20];
    char newAddress[20];
    char newbloodType [3];
    printf("Enter Patient name:\n");
    scanf("%c",&root->Name[0]);
    gets(newName);
    printf("Enter the gender of the new patient:\n");
    scanf("%c", &newGender);
    int year;
    int month;
    int day;
    printf("Enter Year Of Admission In Hospital: \n");
    scanf("%d", &year);
    printf("Enter Month Of Admission In Hospital: \n");
    scanf("%d", &month);
    printf("Enter Day Of Admission In Hospital: \n");
    scanf("%d", &day);
     newDate1 = (day*1000000 + month*10000 + year);
    printf("Enter year of birth: \n");
    scanf("%d", &year);
    printf("Enter month of birth: \n");
    scanf("%d", &month);
    printf("Enter day of birth: ");
    scanf("%d", &day);
    newDate2 = (day*1000000 + month*10000 + year);
    printf("Enter the illness of the new patient : \n");
    scanf("%c",&newIllness[0]);
    gets(newIllness);
    printf("Enter address of the patient : ");
    scanf("%c",&newAddress[0]);
    gets(newAddress);
    printf("Enter blood type of the new patient: \n");
    scanf("%c",&newbloodType[0]);
    gets(newbloodType);
    root = insert(root,newName,newGender,newDate1,newDate2,newIllness,newAddress,newbloodType);
    print(tree);

}
struct AVLNODE *SearchName(char pname[20],struct AVLNODE *temp)
    {
    if(temp==NULL){
        printf("You Don't Have any Patients in The Hospital System\n");
        return NULL;
    }

    else{ if(strcasecmp(pname,temp->Name)==0){
        return temp;
    }

    else if(strcasecmp(pname,temp->Name)== -1){
        SearchName(pname,temp->left);
    }
    else if(strcasecmp(pname,temp->Name)== 1){
       SearchName(pname,temp->right);

    }
    }
    return temp;
}

struct AVLNODE *DeletefromSystem(struct AVLNODE *root,char name[20])
{
    // STEP 1: PERFORM STANDARD BST DELETE

    if (root == NULL){
    printf("Patient does not exist\n");
        return root;

    }
           if(strcasecmp(name,root->Name)<0)
        root->left = DeletefromSystem(root->left, name);

    else if(strcasecmp(name,root->Name)>0)
        root->right = DeletefromSystem(root->right, name);

    else
    {
        // if the node has no children or only one child
        if( (root->left == NULL) || (root->right == NULL) )
        {
            struct AVLNODE *temp = root->left ? root->left :
                                root->right;

            // no child case
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else // one child case
                *root = *temp; // Copy the contents of
            // the non-empty child
            free(temp);
        }
        else
        {
            // node with two children: Get the inorder
            // successor (smallest in the right subtree)
            struct AVLNODE *temp = minNode(root->right);

            // Copy the inorder successor's data to this node
            //root->key = temp->key;
            strcpy(root->Name,temp->Name);
            // Delete the inorder successor
            root->right = DeletefromSystem(root->right, temp->Name);
        }
    }

    // If the tree had only one node then return
    if (root == NULL)
        return root;

    // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
    root->Height = 1 + MAX(getHeight(root->left),getHeight(root->left));

    // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to
    // check whether this node became unbalanced)
    int balance = getBalance(root);

    // If this node becomes unbalanced, then there are 4 cases

    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return singleRotateRight(root);

    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0)
    {
        root->left = singleRotateLeft(root->left);
        return singleRotateRight(root);
    }

    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return singleRotateLeft(root);

    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0)
    {
        root->right = singleRotateRight(root->right);
        return singleRotateLeft(root);
    }

    return root;
}

int Menu_Update(){
int option;
char c[6];
printf("Press 1: Update Patient name\n");
printf("Press 2: Update Gender Of Patient\n");
printf("Press 3: Update Date Of Admission In Hospital\n");
printf("Press 4: Update Illness Of Patient\n");
printf("Press 5: Update Address Of Patient\n");
printf("Press 5: Update Blood Type Of Patient\n");
gets(c);
option=atoi(c);
return option;
}

struct AVLNODE *Update(struct AVLNODE *root,char name[20])
{
    struct AVLNODE *temp;
        temp=SearchName(name,root);
    if (temp==NULL){
        return root;
    }
    int i=Menu_Update();
    char name2[20];
    char gender2;
    char address2[20];
    char illness2[20];
    char bloodType2[3];
    int DateA;
    int DateB;
    switch (i){
    case 1:
        gender2=temp->Gender;
        strcpy(address2,temp->Address);
        strcpy(bloodType2,temp->BloodType);
        DateA=temp->DateInHos;
        DateB=temp->DateOfBirth;
        root=DeletefromSystem(root,name);
        printf("Enter New Patient Name\n");
        gets(name2);
        root=insert(root,name2,gender2,DateA,DateB,illness2,address2,bloodType2);
        break;
    case 2:
        printf("Enter Gender\n");
        scanf("%s",&gender2);
         temp->Gender=gender2;

        break;
        case 3:
        printf("Enter the new Date Admission In Hospital \n");
        scanf("%d",&DateA);
        temp->DateInHos=DateA;
        break;
        case 4:
         printf("Enter the new Date Of Birth\n");
         scanf("%d",&DateB);
        temp->DateOfBirth=DateB;
        break;
    case 5:
        printf("Enter the name of the new illness\n");
        gets(illness2);
        strcpy(temp->Illness,illness2);
        break;
    case 6:
        printf("Enter the new  Address\n");
        gets(address2);
        strcpy(temp->Address,address2);
        break;
    case 7:
        printf("Enter the new blood type\n");
        gets(bloodType2);
        strcpy(temp->BloodType,bloodType2);
        break;
    default:
        printf("Unavailable\n");
        break;
        }

    return root;
}
void print(struct AVLNODE *print){
    printf("Patient Name : %s \nPatient Gender : %c \nDate Of Admission Of Patient In Hospital: %d \nDate Of Birth Of Patient: %d \nThe illness that the patient suffers from : %s \nThe address where the patient lives : %s \nThe patient's blood type: %s\n",print->Name,print->Gender,print->DateInHos,print->DateOfBirth,print->Illness,print->Address,print->BloodType);
}
 void printlexicoInOrder(struct AVLNODE *az){
    if(az->left!=NULL){
        printlexicoInOrder(az->left);
        print(az);
    }
    if(az->right!=NULL){
        printlexicoInOrder(az->right);
    }
}
void printSameIllness(struct AVLNODE *node , char illnesss[20]){
    if(node->left!=NULL)
        printSameIllness(node->left,illnesss);
    if(!strcmp(node->Illness,illnesss))
        print(node);
    if(node->right!=NULL)
        printSameIllness(node->right,illnesss);
}


