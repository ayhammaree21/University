							Plane luggage unloading Simulation
********************************************************************************************************************************************************
1- Data Structures:  Firstly,we must define data structures for the planes passengers, luggages  and other entities, Create a struct for passengers that has attributes like number of luggage and id and status Each struct should include necessary informations about passengers and we need struct for airport and the atrributes will have number of employees  , number of planes and etc.then define data structures to store that each plane how much luggages in it and other information, and we create a struct for Unloading Employees and their information etc. and struct for mini truck .
2- Arguments.txt: we must read user-defined values from arguments.txt file, first step is open and read the arguments.txt file to retrieve user-defined values that mentioned in the paper for the simulation parameters, then parse the file to extract and assign the  values to appropriate variables or data structures in the our C program.
3- Proccess_Creation: the important mission of us is to utilize the concept of processes  to achieve parallelism and concurrent execution between passengers and the unloading employees, by use this steps create separate processes for each passenger. and the most important thing for Parallelsim and concurrent execution is within each process, the passenger will be the parent and  employees is childrens 
4- Process_Creation_forking: we will Create processes for each employee and use process creation mechanisms  like fork() in C 	to make separate processes for each employees and each process will handle a specific passenger, allowing for independent work and luggages
6- Communication_Mechansims: in this step we must work on the communication between the passenger  and unloading employees or 	between parent and  his childern processes and to utilize the commuination mentioned above we can establish communication channels, such as shared memory or fifos or pipes or msg queues, to exchange information and synchronize actions and we must implement .
7- Luggage_Transfer : here we use a shared memory  for luggages and there is an employee processes will access the shared memory and get the luggage for each passenger id and put it into mini trucks to transfer it , so when the employees access the shared memory and transfer it into mini trucks we must delete it from shared memory and when the mini trucks transfer it for airport and the passenger receipt it , it is deleted from the whole system.
8- accessing the memory and queue:  the queue will be accessed by all employees , but the shared memory we need a semaphore to access it by using semaphores for each passenger with id match with luggage id , to make sense there no stuck processes trying to get the same luggage for same passenger 	
9- End_Simulation: Finally, we will lend the Plane luggage unloading Simulation, set thresholds for overall waiting time for passnegers, waiting time for planes to unload luggages, or any one from unloading employees does not carry any luggage more than the minutes in argumnets.txt file.
***********************************************************************************************************************************************************************